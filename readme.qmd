---
title: "Some ideas for exploring missing data"
format: docx
fig-format: retina
bibliography: references.bib
---

Nicholas Tierney

Infectious Disease Ecology and Modelling group

Telethon Kids Institute, Perth, WA, Australia

## Introduction

If you've done data analysis, then chances are you've encountered missing data. I've encountered my fair share of missing data and I felt so frustrated by how hard it was to handle and wrangle with them that I have written two R packages (visdat, naniar), and several papers on the topic.

The goal of this article is to share some condensed ideas on exploring missing data, using the software I've written, `naniar`, and `visdat`. To that end, we will focus on four questions, how do we:

1.  Start looking at missing data?
2.  Explore missingness in variables?
3.  Explore missingness relationships?
4.  Explore imputed values

# Start looking at missing data?

```{r}
#| echo: false
options(tidyverse.quiet = TRUE)
library(knitr)
```


```{r}
#| label: load-pkgs
library(tidyverse)
library(visdat)
library(naniar)
<<<<<<< Updated upstream
=======

>>>>>>> Stashed changes
```

We can use the `visdat` package [@visdat] to get an overview of the missingness of an entire data set. It was heavily inspired by [`csv-fingerprint`](https://setosa.io/blog/2014/08/03/csv-fingerprints/), and functions like `missmap`, from `Amelia` [@amelia].

We can use `visdat`'s `vis_miss()` function to visualise the missingness of a whole dataframe. @fig-vis-miss-cluster-vanilla gives an example where it displays the data as missing, or not missing, and provides the amount of missings in each columns.

```{r}
#| label: fig-vis-miss-cluster-vanilla
#| fig-height: 3
#| fig-cap: "An overview of missing data in the airquality dataset. The x axis shows the variables of the data, along with the amount of missingness in that variable, and the y axis shows the rows. Each cell represents the missingness of a datum. The overall missingness is given in a percentage below in the legend. We learn that there is nearly 5% missing data overall, the missing data occurs in Ozone and Solar.R, and mostly in Ozone."
vis_miss(airquality)
```

We learn that there is nearly 5% missing data overall, the missing data occurs in Ozone and Solar.R, and mostly in Ozone. The other variables do not have any missing data.

### Facetting in visdat

<<<<<<< Updated upstream
You can also split up the `vis_miss` plots into several facetted plots via the `facet` argument. For example, in @fig-vis-miss-facet we facet by the `Month` variable.
=======
The goal of this article is to share some condensed ideas on exploring missing data, using `naniar`, and `visdat`. To that end, we will focus on four questions.

1.  How do we start looking at missing data?
2.  How do we explore missingness in variables?
3.  How do we explore missingness relationships?
4.  How do we explore imputed values?

But first, let's introduce ourselves to the data.

# The data

The data used for this paper is measurements of rodents in Kansas, from @hope2023. 
The use of this data is inspired by Allison Horst's "Exploring missing values in naniar" [shiny application](https://allisonhorst.shinyapps.io/missingexplorer/). 
In this paper we use a different, larger set of the data. For information on the metadata of the paper see [here](http://lter.konza.ksu.edu/content/csm08-small-mammal-host-parasite-sampling-data-16-linear-trapping-transects-located-8-lter). 
The data set provides various biometric length and weight measurements, for four species of rodents: the Eastern woodrat, Prairie vole, Western harvest mouse, and Deer mouse. 
Table @tbl-rodents-slice shows a snapshot of 6 rows of the data, including some of the missingness.

```{r}
#| label: tbl-rodents-slice
#| echo: false
rodents %>% 
  # selected snapshot of interesting missingness
  filter(between(row_number(), 75, 80)) %>% 
  kable(caption = "The rodents dataset, containing measurements of various rodents, including: total length - from tail to nose, tail length, hind foot length, ear length, and weight. Each row represents a measurement of a given species of roden at a particular date. There are missing values.")
```

# How do we start looking at missing data?

To get an overview of the missing data, we can use the `visdat` package [@visdat], which was inspired by the work in [`csv-fingerprint`](https://setosa.io/blog/2014/08/03/csv-fingerprints/), and functions like `missmap`, from `Amelia` [@amelia]. The key function for exploring missingness is `vis_miss()`, which visualises the missingness of a whole dataframe. @fig-vis-miss gives an example where it displays the data as missing, or not missing, and provides information on the amount of missings in each column.


```{r}
#| label: fig-vis-miss
#| fig-cap: "An overview of missing data in the rodents dataset. The x axis shows the variables of the data, along with the amount of missingness in that variable, and the y axis shows the rows. Each cell represents the missingness of a datum. The overall missingness is given in a percentage below in the legend. We learn that there is nearly 29% missing data overall, the missing data occurs in total_length, tail_length, hind_foot_length, ear_length, weight, and age."
vis_miss(rodents)
```

We learn there is nearly 29% missing data overall, the missing data occurs in total_length, tail_length, hind_foot_length, ear_length, weight, and age, and mostly in total length and ear_length. 

## Exploring subgroups: Using facetting in visdat

To see this plot split up by species, we can split up the `vis_miss` plots into several facetted plots via the `facet` argument. For example, in @fig-vis-miss-facet we facet by the `species` variable. Visually, it appears that the missingness occurs in each species at roughly the same rate. 
>>>>>>> Stashed changes

```{r}
#| label: fig-vis-miss-facet
#| fig-height: 3
#| fig-cap: "An further overview of missing data in the airquality dataset. Similar to the previous graphic, we now present a facetted series of sub plots, one for each Month. We learn from this that most of the Ozone missingness happens in Month 6, and there aren't missing values for months 6, 7, and 9."
vis_miss(airquality, facet = Month) 
```

We learn from this that most of the Ozone missingness happens in Month 6, and there aren't missing values for months 6, 7, and 9.

There are other functions in the visdat package that focus on other types of data, for example, `vis_value()`, `vis_binary()`, and `vis_compare()`. To read more about the functions available in `visdat` see the vignette ["Using visdat"](https://CRAN.R-project.org/package=visdat/vignettes/using_visdat.html).

## Explore missingness in variables

Another approach to visualising the missingness in a dataset is to use the `gg_miss_var` plot, as seen in @fig-gg-miss-var.

```{r}
#| label: fig-gg-miss-var
#| fig-height: 1.5
#| fig-width: 3
#| fig-cap: "Number of missing values for each variable. The x axis shows the number of missings, and the y axis shows each variable. We learn Ozone and Solar.R have the most missing data, and Ozone has the most missing data."
gg_miss_var(airquality)
```

This displays the number of missing values in each variable. We learn that there are pretty much only missing values for Ozone and Solar, with more for Ozone. Just like with `vis_miss()`, we can add in facets in these plots, via the `facet` argument, see @fig-gg-miss-var-facet.

```{r}
#| label: fig-gg-miss-var-facet
#| fig-height: 2.5
#| fig-width: 4
#| fig-cap: "Similar to the above plot but one subplot for each Month. We learn that most of the missing values occur in month 6 for Ozone, and that months 6, 7, and 9 don't have and Solar.R missing values."

gg_miss_var(airquality, facet = Month)
```

Where we learn that month 9 doesn't have much missing data, and a lot of the missing data seems to occur in month 6.

<<<<<<< Updated upstream
There are more visualisations available in `naniar` (each starting with `gg_miss_`) - you can see these in the ["Gallery of Missing Data Visualisations" vignette](https://cran.r-project.org/package=naniar/vignettes/naniar-visualisation.html). The plots created with the `gg_miss` family all have a basic theme, but you can customise them by adding components like a standard ggplot object:
=======
```{r}
#| label: fig-gg-miss-upset
#| fig-cap: "An upset plot of 7 sets of missingness in the rodents data displaying a more nuanced depiction of the patterns of missingness in the data. The number of missings in each variable is seen on the bottom left bar plot. The bottom panel shows the different sets of co-occuring missingness. For example, the bottom left two dots show ear length and total length going missing together - corresponding to the bar plot above it, showing 278 missings. We learn that there are two dominant sets of missingness, where ear length and total length go missing, and then weight hind foot length, tail length, ear length and total length being missing."
gg_miss_upset(rodents)
```

There are more visualisations available in `naniar` (each starting with `gg_miss_`) - you can see these in the ["Gallery of Missing Data Visualisations" vignette](https://cran.r-project.org/package=naniar/vignettes/naniar-visualisation.html). Most plots created with the `gg_miss` family all have a basic theme (except for `gg_miss_upset()`), but you can customise them by adding components like a standard ggplot object:
>>>>>>> Stashed changes

```{r}
#| label: gg-miss-var-theme
#| fig-show: hide
gg_miss_var(airquality) + 
  theme_bw() + 
  labs(y = "Number of missing observations")
```

It is also worth noting that for every visualisation of missing data in `naniar`, there is an accompanying function to extract the data used in the plot. This is important as the plot should not return a dataframe - but we want to make the data available for use by the user so it isn't locked into a plot.

You can find these summary plots below, with `miss_var_summary()` providing the dataframe that `gg_miss_var()` is based on.

```{r}
miss_var_summary(airquality)
```

Which also works with `group_by()`:

```{r}
#| results: hide
airquality %>% 
  group_by(Month) %>% 
  miss_var_summary()
```

Similarly, there is a `data_vis_miss()` function in the `visdat` package, which returns the data in the format that this visualisation requires.

```{r}
#| results: hide
data_vis_miss(airquality)
```

The aim of these is to provide the data required to make these visualisations, so if people want to create their own more customised versions of `vis_miss()` or `gg_miss_var()` then they can do that.

## Exploring missingness relationships

We can identify key variables that are missing using `vis_miss()` and `gg_miss_var()`, but for further exploration, we need to explore the relationship amongst the variables in this data:

-   Ozone,
-   Solar.R
-   Wind
-   Temp
-   Month
-   Day

Typically, when exploring this data, we might want to explore the variables Solar.R and Ozone. @fig-example-geom-point shows a scatter plot of solar radiation and ozone.

```{r}
#| label: fig-example-geom-point
#| warning: false
#| echo: true
#| fig-width: 3
#| fig-height: 3
#| fig-cap: "Plot of Solar.R against Ozone. Solar.R is on the X axis and Ozone is on the Y axis. We learn that there is a slight positive correlation of Ozone with Solar.R"

library(ggplot2)
ggplot(airquality, 
       aes(x = Solar.R, 
           y = Ozone)) + 
  geom_point()
```

The problem with this is ggplot does not handle missings be default, and removes the missing values. This makes them hard to explore. It also presents the strange question of "how do you visualise something that is not there?". One approach to visualising missing data comes from [`ggobi`](https://en.wikipedia.org/wiki/GGobi) and [`manet`](http://www.rosuda.org/MANET/), where we impute "NA" values with values 10% lower than the minimum value in that variable, which puts these values in a margin area on the graphic.

This imputation is wrapped up in the `geom_miss_point()` ggplot2 geom. @fig-geom-miss-point illustrates this by exploring the relationship between Ozone and Solar radiation from the airquality dataset.

```{r}
#| label: fig-geom-miss-point
#| echo: true
#| fig-width: 4
#| fig-height: 3
#| fig-show: hold
#| fig-cap: "Improved plot of Ozone against Solar.R, we can now see the missing values are imputed 10% below the minimum value. The green dots on the x axis represent the Solar.R values that have missing Ozone. The green dots on the Y axis represent Ozone values that have missing Solar.R. The two dots in the bottom left corner are missing for both Ozone and Solar.R"

ggplot(airquality, 
       aes(x = Solar.R, 
           y = Ozone)) + 
  geom_miss_point() + 
  scale_colour_brewer(palette = "Dark2")

```

Being a proper ggplot geom, it supports all of the standard features of ggplot2, such as **facets** and **themes**. See @fig-ggmissing-facet for an example with faceting by month and a custom theme.

```{r}
#| label: fig-ggmissing-facet
#| echo: true
#| fig-width: 4
#| fig-height: 3
#| fig-cap: "A faceted version of the improved Ozone against Solar.R plot where each month is split out into its own subplot."

ggplot(airquality, 
       aes(x = Solar.R, 
           y = Ozone)) + 
  geom_miss_point() + 
  facet_wrap(~Month) + 
  theme_dark()

```

## Numerical summaries of missing values

<<<<<<< Updated upstream
`naniar` provide numerical summaries for missing data. Two convenient counters of complete values and missings are `n_miss()` and `n_complete()`. These work on both dataframes and vectors, similar to `dplyr::n_distinct()`
=======
As evidenced by @fig-gg-miss-upset, there is a structure in the missingness in the rodents data. We can perform some basic clustering on the missingness and then and learn which variables and their values predict these missingness groups using decision trees [@Tierney2015; @Barnett2017]. We start by adding missingness clusters, choosing four based on @fig-gg-miss-upset. We encourage exploring different numbers of clusters. We can then confirm this pattern using visualisations.
>>>>>>> Stashed changes

```{r}
#| label: helpers-n-miss
#| echo: true

dplyr::n_distinct(airquality)
dplyr::n_distinct(airquality$Ozone)

n_miss(airquality)
n_miss(airquality$Ozone)

n_complete(airquality)
n_complete(airquality$Ozone)

```

The syntax for the other numerical sumamries in `naniar` are `miss_`, and then `case`, or `var` to refer to cases or variables. There are then `summary`, `table`, `run`, `span`, and `cumsum` options to explore missing data.

`prop_miss_case` and `pct_miss_case` return numeric value describing the proportion or percent of missing values in the dataframe.

```{r}
#| label: prop-miss-case
prop_miss_case(airquality)
pct_miss_case(airquality)
```

<<<<<<< Updated upstream
`miss_case_summary()` returns a numeric value that describes the number of missings in a given case (aka row), the percent of missings in that row.

```{r}
#| label: miss-case-summary

miss_case_summary(airquality)

=======
Variable importance scores (@tbl-var-imp) reveal the most important variables for predicting missingness cluster are date and sex. 

```{r}
#| label: tbl-var-imp
#| echo: false
library(tibble)
imp_tbl <- tibble(
  variable = names(rodent_miss_cart$variable.importance),
  importance = rodent_miss_cart$variable.importance
) 
kable(
  imp_tbl,
  caption = "Variable importance scores for predicting missingness cluster. The most important variables are date and sex."
  )
>>>>>>> Stashed changes
```

`miss_case_table()` tabulates the number of missing values in a case / row. Below, this shows the number of missings in a case:

```{r}
#| label: miss-case-table

miss_case_table(airquality)

```

We can interpret this output as follows:

-   There are 111 cases with 0 missings, which comprises about 72% of the data.
-   There are then 40 cases with 1 missing, these make up 26% of the data.
-   There are then 2 cases with 2 missing - these make up 1% of the data.

Similar to `pct_miss_case()`, `prop_miss_case()`, `pct_miss_var()` and `prop_miss_var()` returns the percent and proportion of variables that contain a missing value.

```{r}
#| label: prop-miss-var
prop_miss_var(airquality)
pct_miss_var(airquality)
```

`miss_var_summary()` then returns the number of missing values in a variable, and the percent missing in that variable.

```{r}
#| label: miss-var-summary

miss_var_summary(airquality)

```

Finally, `miss_var_table()`. This describes the number of missings in a variable.

-   There are 4 variables with 0 missings, comprising 66.67% of variables in the dataset.
-   There is 1 variable with 7 missings
-   There is 1 variable with 37 missings

```{r}
#| label: miss-var-table

miss_var_table(airquality)

```

There are also summary functions for exploring missings that occur over a particular span or period of the dataset, or the number of missings in a single run:

-   `miss_var_run()`, and
-   `miss_var_span()`

`miss_var_run()` can be particularly useful in time series data, as it allows you to provide summaries for the number of missings or complete values in a single run. The function `miss_var_run()` provides a data frame of the run length of missings and complete values. To explore this function we will use the built-in dataset, `pedestrian`, which contains hourly counts of pedestrians from four locations around Melbourne, Australia, from 2016.

To use `miss_var_run()`, you specify the variable that you want to explore the runs of missingness for, in this case, `hourly_counts`:

```{r}
#| label: miss-var-run
miss_var_run(pedestrian,
             hourly_counts)
```

The `miss_var_span()` function is used to determine the number of missings over a specified repeating span of rows in variable of a dataframe. Similar to `miss_var_run()`, you specify the variable that you wish to explore, you then also specify the size of the span with the `span_every` argument.

```{r}
#| label: ped-miss-var-span

miss_var_span(pedestrian,
              hourly_counts,
              span_every = 100)

```

# Explore imputed values

Using the [`simputation`](https://cran.r-project.org/package=simputation) package, we impute values for Ozone using the `impute_lm()` function, then visualise the data, as seen in @fig-simpute-invisible.

```{r}
#| label: fig-simpute-invisible
#| message: false
#| echo: true
#| fig-height: 3
#| fig-width: 3
#| fig-cap: "Imputed values are not visible. A plot of Ozone by Temperature. The Imputed Ozone values are not visible because we have no way to identify them in the data."

library(simputation)
library(dplyr)

airquality %>%
  impute_lm(Ozone ~ Temp + Wind) %>%
  ggplot(aes(x = Temp,
             y = Ozone)) + 
  geom_point()
  
```

Note that we no longer get any warnings regarding missing observations - because they are all imputed! But this comes at a cost: we also no longer have information about where the imputations are - they are now sort of invisible.

We can track a copy of the missing data locations by using the function `nabular()`, which binds another dataset to the current one which notes the locations of the missing data. 
This is a really important idea with `naniar`, but to keep it brief, for each column with missing values, a new column is created to help identify misingness. 
For example, a new column called `Solar.R_NA` is created:

```{r}
nabular(airquality) |> 
  select(starts_with("Solar.R")) |> 
  head()
```

The key takeaway here is that there is now a copy of the data bound to it, with each column ending in `_NA`, and the values either being "NA" for missing, or "!NA" for not missing. For more details on the theory underlying this, and the benefits of this, we recommend reading our paper, "Expanding Tidy Data Principles to Facilitate Missing Data Exploration, Visualization and Assessment of Imputations" [@Tierney2023].

Using the shadow matrix to keep track of where the missings are, you can actually keep track of the imputations, colouring by what was previously missing in Ozone. For example, let's create the nabular data, then impute the data and plot it in @fig-simpute-visible-lm.

```{r}
#| label: fig-simpute-visible-lm
#| echo: true
#| fig-height: 3
#| fig-width: 4
#| fig-cap: "Regression imputed values of Ozone in a scatterplot of Ozone vs Temperature. Temperature is on the X axis and Ozone is on the Y axis, and the points are coloured by whether they are imputed - 'NA' indicates a previously missing value that has been imputed. We learn that the regression imputation imputes the values approximately amongst the rest of the data, at the surface level, this appears to be a good imputation."

aq_lm_imputed <- airquality %>%
  nabular() %>% 
  as.data.frame() %>% 
  impute_lm(Ozone ~ Temp + Wind)
ggplot(aq_lm_imputed,
         aes(x = Temp,
             y = Ozone,
             colour = Ozone_NA)) + 
  geom_point() + 
  scale_colour_brewer(palette = "Dark2")
  
```

Let's contrast this to how poor imputing just the mean value is, using `impute_mean_all()` in @fig-simpute-visible-mean.

```{r}
#| label: fig-simpute-visible-mean
#| echo: true
#| fig-height: 3
#| fig-width: 4
#| fig-cap: "The same plot as above, but using mean imputation. We learn that mean imputation places the imputed values all at a single point, which does not represent the variation we see in the data."

aq_mean_imputed <- airquality %>%
  nabular() %>% 
  as.data.frame() %>% 
  impute_mean_all()

head(aq_mean_imputed)

ggplot(aq_mean_imputed,
       aes(x = Temp,
             y = Ozone,
             colour = Ozone_NA)) + 
  geom_point() + 
  scale_colour_brewer(palette = "Dark2")
```

<<<<<<< Updated upstream
=======
We can see see the two different imputation methods side by side in @fig-imputed-comparison.

```{r}
#| label: fig-imputed-comparison
#| fig-cap: "Comparing imputation methods of tail length in a scatterplot of tail length vs weight. Weight is on the X axis and tail_length is on the Y axis, and the points are coloured by whether they are imputed - 'NA' indicates a previously missing value that has been imputed. We learn that mean imputation provides imputations that are not representative, linear models with no residuals are representative of the data but very concentrated, and adding residuals adds much more variation to your data."

ggplot(rodents_imputed_comparison,
         aes(x = weight,
             y = tail_length,
             colour = tail_length_NA)) + 
  geom_point(alpha = 0.5) + 
  scale_colour_brewer(palette = "Dark2") + 
  facet_wrap(~imputation_type)
```
>>>>>>> Stashed changes

# Conclusion

In this software corner we have demonstrated the use of the `visdat` and `naniar` R packages for exploring and understanding missing data. 

# References
